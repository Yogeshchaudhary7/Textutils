{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","TextForm","useState","text","setText","style","color","heading","value","backgroundColor","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","newtext","prompt","alert","includes","split","join","document","getElementById","select","navigator","clipboard","writeText","length","defaultProps","aboutText","Alert","role","word","lower","charAt","slice","capitalize","msg","App","setalert","setMode","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.334dd1e0.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {Link} from 'react-router-dom';\r\n \r\n\r\nexport default function Navbar(props) \r\n// Here we made props as props.title and props.aboutText so that our component can use it easily while it replaces its valuew or we can reuse it again\r\n{\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\"to=\"/about\">{props.aboutText}</a>\r\n        </li> */}\r\n        \r\n        \r\n      </ul>\r\n      {/* <form className=\"d-flex\" >\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" html-for=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n\r\n    \r\n}\r\nNavbar.propTypes={\r\n    //title:PropTypes.string.isRequired, //if we want something that has to be given a value than we use is required function but if we set default values to the prop than it will pass the default \r\n    title:PropTypes.string,\r\n    aboutText: PropTypes.string\r\n}\r\n// Here we are applying a check that we cant send the title and about text the value other than string \r\n\r\nNavbar.defaultProps= {\r\n    title: \"Set title here\",\r\n    aboutText: \" about text here\"\r\n}\r\n// Here we are setting the default values to the props saying that if we dont pass any value to the component than it will send these defalut value to it\r\n","import React , {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    \r\n    const handleUpClick=()=>\r\n    {\r\n        //console.log(\"Uppercase was clicked\" + text);\r\n        let newText=text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted To Uppercase\",\"success\");\r\n    }\r\n    const handlelowClick=()=>\r\n    {\r\n        //console.log(\"Uppercase was clicked\" + text);\r\n        let newText=text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted To Lowercase\",\"success\");\r\n    }\r\n    const handleClearClick= ()=>{\r\n        //console.log(\"Lowercase  was clicked\" + text);\r\n        let newText=('');\r\n        setText(newText)\r\n        props.showAlert(\"Text Cleared\",\"success\");\r\n    }\r\n    const handlepresent = () =>{\r\n        let newtext = prompt();\r\n        alert(text.includes(newtext));\r\n     \r\n      }\r\n\r\n    const handleExtraSpaces=()=>{\r\n        let newText= text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra Spaces Deleted\",\"success\");\r\n\r\n    }\r\n    const handlecopy=()=>{\r\n        var text= document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    }\r\n\r\n\r\n    const handleOnChange=(event)=>\r\n    {\r\n        //console.log(\"On change\"); //to print the details on console\r\n        setText(event.target.value) //to change the text value\r\n    }\r\n    const[ text, setText ] = useState(' ');\r\n\r\n        return (\r\n            <>\r\n        <div className=\"container\" style={{color:props.mode==='dark'?'white':'#384958'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n        {/* <label for=\"myBox\" className=\"form-label\"></label> */}\r\n        <textarea className=\"form-control\" value={text} style={{backgroundColor:props.mode==='dark'?'gray':'white', color:props.mode==='dark'?'white':'#384958'}} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n        {/* now above the default value of textarea is is value={text} that we have given in state  const[ text, setText ] = useState('Enter text here'); */}\r\n        </div>\r\n        <button type=\"button\" className=\"btn btn-primary btn-sm mx-1\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n        <button type=\"button\" className=\"btn btn-primary btn-sm mx-1\" onClick={handlelowClick}>Convert To Lowercase</button>\r\n        <button type=\"button\" className=\"btn btn-primary btn-sm mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n        <button type=\"button\" className=\"btn btn-primary btn-sm mx-1\" onClick={handlepresent}>Check String</button>\r\n        <button type=\"button\" className=\"btn btn-primary btn-sm mx-1\" onClick={handleExtraSpaces}>Remove Extra Space</button>\r\n        <button type=\"button\" className=\"btn btn-primary btn-sm mx-1 my-1\" onClick={handlecopy}>Copy</button>\r\n        \r\n\r\n        </div>\r\n        <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'#384958'}}>\r\n            <h2>Your Text Summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length}Minutes to read</p>\r\n            <h2>Preview</h2>\r\n            <p>\r\n                {text.length>0?text:\"Enter something in the textbox above to preview it here\"}\r\n            </p>\r\n\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=> \r\n    {\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n\r\n    }\r\n    return (\r\n        \r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n            </div>\r\n       \r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from \"./components/Alert\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n\n// } from \"react-router-dom\";\n\n\n\nfunction App() \n{\n  const [alert, setalert] = useState(null)\n  const [mode, setMode] = useState('light'); //Whether dark mode is enabled or not \n  const toggleMode=()=>\n    {\n      if(mode === 'light')\n      {\n        setMode('dark');\n        document.body.style.backgroundColor='#384958';\n        showAlert(\"Dark mode has been enabled\",\"success\")\n      }\n      else\n      {\n        setMode('light');\n        document.body.style.backgroundColor='white';\n        showAlert(\"Light mode has been enabled\",\"success\")\n      }\n      // setInterval(() => {\n      //   document.title=\"TextUtils is amazing\";\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title=\"Install TextUtils\";\n      // }, 1500);\n      // CHAMKANEY KE LIYE TITLE KO :P\n    }\n    \n  const showAlert =(message,type)=>{\n  setalert\n  (\n    {\n    msg:message,\n    type:type\n    }\n  )\n  setTimeout(()=> \n  {\n    setalert(null);\n  }, 2000);\n\n\n}  \nreturn (\n    <>\n      {/* here we have made a component (Navbar in which we can change the title name) */}\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n        \n      {/* <Switch>\n          <Route exact path=\"/about\">\n            <About/>\n          </Route>\n         \n          <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>\n          {/* </Route>\n\n      </Switch> */}\n\n      \n      {/* <About /> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}